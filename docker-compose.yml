# Enhanced Docker Compose with improved services and health checks
version: '3.8'

services:
  # Main AUTOBOT API service
  autobot-api:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: autobot-api
    ports:
      - "${PORT:-5000}:5000"
    environment:
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - BITRIX_WEBHOOK_URL=${BITRIX_WEBHOOK_URL}
      - BITRIX_USER_ID=${BITRIX_USER_ID:-1}
      - OLLAMA_HOST=ollama
      - OLLAMA_PORT=11434
      - DEBUG_MODE=${DEBUG_MODE:-false}
      - DATABASE_URL=sqlite:///database/autobot.db
    volumes:
      - ./database:/app/database
      - ./logs:/app/logs
      - ./IA/treinamento/dados_uso:/app/IA/treinamento/dados_uso
    depends_on:
      ollama:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Frontend web service
  autobot-web:
    build:
      context: ./web
      dockerfile: Dockerfile
    container_name: autobot-web
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - VITE_API_URL=http://localhost:5000
    volumes:
      - ./web/src:/app/src
      - ./web/public:/app/public
    depends_on:
      - autobot-api
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Ollama AI service
  ollama:
    image: ollama/ollama:latest
    container_name: autobot-ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
      - ./scripts/ollama-entrypoint.sh:/ollama-entrypoint.sh:ro
    environment:
      - OLLAMA_MODELS=${OLLAMA_MODEL:-llama3}
      - OLLAMA_HOST=0.0.0.0
    entrypoint: ["/bin/sh", "/ollama-entrypoint.sh"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Database backup service (optional)
  db-backup:
    image: alpine:latest
    container_name: autobot-backup
    volumes:
      - ./database:/data/database
      - ./database/backups:/data/backups
    command: >
      sh -c "
        apk add --no-cache sqlite &&
        while true; do
          sqlite3 /data/database/autobot.db '.backup /data/backups/autobot_$(date +%Y%m%d_%H%M%S).db' &&
          find /data/backups -name '*.db' -mtime +7 -delete &&
          sleep 86400
        done
      "
    restart: unless-stopped
    depends_on:
      - autobot-api

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: autobot-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - autobot-api
      - autobot-web
    restart: unless-stopped
    profiles:
      - production

  # Monitoring service (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: autobot-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana for metrics visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: autobot-grafana
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  ollama_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  default:
    name: autobot-network
    driver: bridge